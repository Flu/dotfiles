---
# ansible/bootstrap.yml
# Run with:
#   ansible-playbook -i localhost, bootstrap.yml -c local --ask-become-pass
# Designed for Debian/Ubuntu systems.

- name: Bootstrap development environment
  hosts: localhost
  connection: local
  gather_facts: true
  become: true

  vars:
    # --- Paths and users ---
    dotfiles_root: "{{ playbook_dir | dirname }}"   # assumes playbook in repo/ansible/
    dotfiles_user: "{{ lookup('env','SUDO_USER') | default(lookup('env','USER')) }}"
    user_home: "{{ '/home/' ~ dotfiles_user if dotfiles_user != 'root' else '/root' }}"

    # --- Packages ---
    apt_packages:
      - fastfetch
      - emacs
      - vlc
      - zsh
      - git
      - git-email
      - nmap
      - cmake
      - clang
      - clang-format
      - build-essential
      - gcc
      - g++
      - coreutils
      - libncurses-dev
      - dwarves
      - firefox
      - ocaml
      - opam
    ensure_linux_headers: true

    # --- Haskell (ghcup) ---
    ghcup_bin: "{{ user_home }}/.ghcup/bin/ghcup"
    ghcup_install_script: "https://get-ghcup.haskell.org"

    # --- Oh My Zsh ---
    oh_my_zsh_repo: "https://github.com/ohmyzsh/ohmyzsh.git"
    oh_my_zsh_dest: "{{ user_home }}/.oh-my-zsh"
    oh_my_zsh_custom_themes_src: "{{ dotfiles_root }}/zsh/themes"
    oh_my_zsh_custom_themes_dest: "{{ oh_my_zsh_dest }}/custom/themes"

  tasks:

  # ---------------------------------------------------------------------
  # 1. SYSTEM PREP
  # ---------------------------------------------------------------------

  - name: Update apt cache
    ansible.builtin.apt:
      update_cache: yes
    when: ansible_facts['os_family'] == "Debian"

  - name: Install essential packages
    ansible.builtin.apt:
      name: "{{ apt_packages }}"
      state: present
      install_recommends: no
    when: ansible_facts['os_family'] == "Debian"

  - name: Install linux headers for current kernel
    ansible.builtin.shell: |
      apt-get install -y "linux-headers-$(uname -r)"
    args:
      creates: "/lib/modules/$(uname -r)/build"
    when:
      - ansible_facts['os_family'] == "Debian"
      - ensure_linux_headers

  # ---------------------------------------------------------------------
  # 2. ZSH + OH-MY-ZSH
  # ---------------------------------------------------------------------

  - name: Ensure zsh is installed
    ansible.builtin.package:
      name: zsh
      state: present

  - name: Get zsh path
    ansible.builtin.command: which zsh
    register: zsh_bin
    failed_when: false
    changed_when: false

  - name: Fallback zsh path if missing
    ansible.builtin.set_fact:
      zsh_path: "{{ zsh_bin.stdout | default('/usr/bin/zsh') }}"

  - name: Get current shell for user
    ansible.builtin.command: getent passwd "{{ dotfiles_user }}" | cut -d: -f7
    register: current_shell
    changed_when: false

  - name: Change default shell to zsh if not already
    ansible.builtin.user:
      name: "{{ dotfiles_user }}"
      shell: "{{ zsh_path }}"
    when: current_shell.stdout != zsh_path

  - name: Install Oh My Zsh (clone if missing)
    ansible.builtin.git:
      repo: "{{ oh_my_zsh_repo }}"
      dest: "{{ oh_my_zsh_dest }}"
      update: no
      version: master
      accept_hostkey: yes
    become: false

  - name: Ensure custom Zsh themes directory exists
    ansible.builtin.file:
      path: "{{ oh_my_zsh_custom_themes_dest }}"
      state: directory
      owner: "{{ dotfiles_user }}"
      mode: '0755'
    become: false

  - name: Copy custom Zsh themes (if any)
    ansible.builtin.copy:
      src: "{{ oh_my_zsh_custom_themes_src }}/"
      dest: "{{ oh_my_zsh_custom_themes_dest }}/"
      owner: "{{ dotfiles_user }}"
      mode: '0644'
      recurse: yes
    when: ansible.builtin.stat(path=oh_my_zsh_custom_themes_src).stat.exists
    become: false

  - name: Backup existing shell dotfiles
    ansible.builtin.shell: |
      mkdir -p "{{ user_home }}/.dotfiles-backup"
      ts=$(date +%Y%m%d%H%M%S)
      for f in .zshrc .zsh_profile; do
        if [ -f "{{ user_home }}/$f" ]; then
          mv "{{ user_home }}/$f" "{{ user_home }}/.dotfiles-backup/${f}.$ts"
        fi
      done
    args:
      executable: /bin/bash
    become: false

  - name: Deploy .zshrc from repo
    ansible.builtin.copy:
      src: "{{ dotfiles_root }}/zsh/.zshrc"
      dest: "{{ user_home }}/.zshrc"
      owner: "{{ dotfiles_user }}"
      mode: '0644'
      backup: yes
    when: ansible.builtin.stat(path=dotfiles_root + '/zsh/.zshrc').stat.exists
    become: false

  - name: Deploy .zsh_profile from repo (if exists)
    ansible.builtin.copy:
      src: "{{ dotfiles_root }}/zsh/.zsh_profile"
      dest: "{{ user_home }}/.zsh_profile"
      owner: "{{ dotfiles_user }}"
      mode: '0644'
      backup: yes
    when: ansible.builtin.stat(path=dotfiles_root + '/zsh/.zsh_profile').stat.exists
    become: false

  # ---------------------------------------------------------------------
  # 3. EMACS
  # ---------------------------------------------------------------------

  - name: Backup existing Emacs config
    ansible.builtin.shell: |
      mkdir -p "{{ user_home }}/.dotfiles-backup"
      ts=$(date +%Y%m%d%H%M%S)
      if [ -f "{{ user_home }}/.emacs" ]; then
        mv "{{ user_home }}/.emacs" "{{ user_home }}/.dotfiles-backup/.emacs.$ts"
      fi
    args:
      executable: /bin/bash
    become: false

  - name: Deploy .emacs from repo
    ansible.builtin.copy:
      src: "{{ dotfiles_root }}/emacs/.emacs"
      dest: "{{ user_home }}/.emacs"
      owner: "{{ dotfiles_user }}"
      mode: '0644'
      backup: yes
    when: ansible.builtin.stat(path=dotfiles_root + '/emacs/.emacs').stat.exists
    become: false

  # ---------------------------------------------------------------------
  # 4. HASKELL / GHCUP
  # ---------------------------------------------------------------------

  - name: Check for ghcup binary
    ansible.builtin.stat:
      path: "{{ ghcup_bin }}"
    register: ghcup_stat
    become: false

  - name: Install ghcup if missing
    ansible.builtin.shell: |
      curl --proto '=https' --tlsv1.2 -sSf {{ ghcup_install_script }} | BOOTSTRAP_HASKELL_NONINTERACTIVE=1 sh -s -- -y
    args:
      creates: "{{ ghcup_bin }}"
      executable: /bin/bash
    environment:
      HOME: "{{ user_home }}"
    become: false
    when: not ghcup_stat.stat.exists

  - name: Ensure ghcup binaries are on PATH
    ansible.builtin.lineinfile:
      path: "{{ user_home }}/.profile"
      regexp: '(^export PATH=.*\\.ghcup)'
      line: 'export PATH="$HOME/.ghcup/bin:$HOME/.cabal/bin:$HOME/.local/bin:$PATH"'
      create: yes
      owner: "{{ dotfiles_user }}"
    become: false

  - name: Ensure ghc, cabal, hls, and stack installed via ghcup
    ansible.builtin.shell: |
      set -e
      export HOME="{{ user_home }}"
      export PATH="$HOME/.ghcup/bin:$HOME/.cabal/bin:$HOME/.local/bin:$PATH"
      for tool in ghc cabal hls stack; do
        if ! command -v $tool >/dev/null 2>&1; then
          ghcup install $tool || true
        fi
      done
    args:
      executable: /bin/bash
    become: false

  # ---------------------------------------------------------------------
  # 5. OCAML / OPAM
  # ---------------------------------------------------------------------

  - name: Check if opam initialized
    ansible.builtin.stat:
      path: "{{ user_home }}/.opam"
    register: opam_stat
    become: false

  - name: Initialize opam if missing
    ansible.builtin.shell: |
      export HOME="{{ user_home }}"
      opam init -y --disable-sandboxing
    args:
      creates: "{{ user_home }}/.opam"
      executable: /bin/bash
    become: false
    when: not opam_stat.stat.exists

  # ---------------------------------------------------------------------
  # 6. FINAL PERMISSIONS FIX
  # ---------------------------------------------------------------------

  - name: Ensure ownership of user's home (safety)
    ansible.builtin.file:
      path: "{{ user_home }}"
      state: directory
      recurse: yes
      owner: "{{ dotfiles_user }}"
    become: true
